version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: k8s-mgmt-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: k8s_management
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - k8s-mgmt

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: k8s-mgmt-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - k8s-mgmt

  # API Server
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: k8s-mgmt-api
    ports:
      - "8080:8080"
    environment:
      ENVIRONMENT: development
      DATABASE_URL: postgres://postgres:postgres@postgres:5432/k8s_management?sslmode=disable
      REDIS_URL: redis://redis:6379/0
      JWT_SECRET: your-super-secret-jwt-key-change-this-in-production
      PORT: 8080
    volumes:
      - ./:/app
      - /root/.ssh:/root/.ssh:ro  # SSH keys for cluster management
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - k8s-mgmt
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  k8s-mgmt:
    driver: bridge
